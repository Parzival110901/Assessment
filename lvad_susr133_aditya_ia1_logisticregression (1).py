# -*- coding: utf-8 -*-
"""LVAD_SUSR133_Aditya-IA1-LogisticRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tu2xREPxdIj6fz8zEZ8O457ukSXclKp_
"""

#Logistic Regression
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix


# Function for EDA, Outlier Detection, and Logistic Regression
def perform_logistic_regression(dataset_path):
    # Load the dataset
    df = pd.read_csv(dataset_path)

    # Fill null values
    df.fillna(method='ffill', inplace=True)

    # Label Encoding for categorical variables
    label_encoder = LabelEncoder()
    categorical_cols = df.select_dtypes(include=['object']).columns
    for col in categorical_cols:
        df[col] = label_encoder.fit_transform(df[col])

    # Exploratory Data Analysis
    print("===== Exploratory Data Analysis =====")
    print("Dataset Shape:", df.shape)
    print("\nFirst 5 rows of the dataset:")
    print(df.head())
    print("\nData Types:")
    print(df.dtypes)
    print("\nSummary Statistics:")
    print(df.describe())
    print("\nMissing Values:")
    print(df.isnull().sum())

    # Outlier Detection
    print("\n===== Outlier Detection =====")
    # Detect outliers using IQR method
    Q1 = df.quantile(0.25)
    Q3 = df.quantile(0.75)
    IQR = Q3 - Q1
    outliers = ((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)
    print("Number of outliers detected:", outliers.sum())

    # Data Visualization
    print("\n===== Data Visualization =====")
    # Pairplot for numerical variables without outliers
    sns.pairplot(df[~outliers])
    plt.show()

    # Model Building and Evaluation
    print("===== Model Building and Evaluation =====")
    # Splitting the data into features and target variable
    X = df.drop('booking status', axis=1)
    y = df['booking status']

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Logistic Regression
    print("\nLogistic Regression Model")
    log_reg = LogisticRegression()
    log_reg.fit(X_train, y_train)
    y_pred = log_reg.predict(X_test)

    # Model evaluation
    accuracy = accuracy_score(y_test, y_pred)
    print("Accuracy Score:", accuracy)
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))
    print("\nConfusion Matrix:")
    print(confusion_matrix(y_test, y_pred))


logistic_regression_dataset_path = "/content/booking.csv"
perform_logistic_regression(logistic_regression_dataset_path)