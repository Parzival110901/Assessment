# -*- coding: utf-8 -*-
"""LVADSUSR133-ADITYA.V-predictive analysis-KNNclassification-ia2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gSQD9mxdcG1OVD69YoAmhnyeHjud5Obp
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, accuracy_score

# Load the dataset from CSV
data = pd.read_csv('/content/winequality-red.csv')

# Remove duplicate rows
data.drop_duplicates(inplace=True)

# Display the first few rows of the dataset
print("Original dataset:")
print(data.head())

# EDA statistics
print("\nEDA statistics:")
print(data.describe())

# Check for missing values
print("\nMissing values before imputation:")
print(data.isnull().sum())

# Replace missing values with mean
imputer = SimpleImputer(strategy='mean')
data = pd.DataFrame(imputer.fit_transform(data), columns=data.columns)

# Check for missing values after imputation
print("\nMissing values after imputation:")
print(data.isnull().sum())

# Remove outliers using Z-score method
z_scores = np.abs((data - data.mean()) / data.std())
data = data[(z_scores < 3).all(axis=1)]

# Assign labels based on quality range
data['quality_category'] = np.where(data['quality'] >= 7, 'good', 'bad')

# EDA visualization
# Pairplot of selected features
sns.pairplot(data[['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'quality_category']],
             hue='quality_category', diag_kind='hist')
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title("Correlation Heatmap")
plt.show()

# Feature selection (all features except 'quality' and 'quality_category')
X = data.drop(['quality', 'quality_category'], axis=1)
y = data['quality_category']

# Data splitting
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Data transformation (standardization)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

k_values = range(1, 21)  # Range of k values to experiment with
accuracy_scores = []

for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train_scaled, y_train)
    y_pred = knn.predict(X_test_scaled)
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_scores.append(accuracy)

# Plotting the accuracy scores for different k values
plt.plot(k_values, accuracy_scores, marker='o', linestyle='-')
plt.title('Accuracy vs. k Value')
plt.xlabel('k Value')
plt.ylabel('Accuracy')
plt.xticks(k_values)
plt.grid(True)
plt.show()

# Find the optimal k value
optimal_k = k_values[np.argmax(accuracy_scores)]
print("Optimal k value:", optimal_k)

# Model application with optimal k value
knn = KNeighborsClassifier(n_neighbors=optimal_k)
knn.fit(X_train_scaled, y_train)

# Model evaluation
y_pred = knn.predict(X_test_scaled)
print("\nClassification report:")
print(classification_report(y_test, y_pred))
print("\nAccuracy:", accuracy_score(y_test, y_pred))